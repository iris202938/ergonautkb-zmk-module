/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "ergonaut_one.dtsi"
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 240

#define QWE 0
#define NIC 1
#define LIN 2
#define NICL 3
#define WIN 4
#define LWR 5
#define LWRW 6
#define RSE 7
#define RSEW 8
#define ADJ 9
#define ADJW 10
#define MOV 11
#define NUM 12
#define BLE 13

&adc {
	status = "okay";
};

/ {
	// 左のジョイスティック（マウスカーソル移動用）
	anin0: analog_input_0 {
		compatible = "zmk,analog-input";
		sampling-hz = <100>;

		// オートマウスレイヤーを制御するInput Processorを割り当て
		input-processors = <&zip_autolayer_on>;
		
		y-ch {
			io-channels = <&adc 0>;
			mv-mid = <1716>;
			mv-min-max = <1600>;
			mv-deadzone = <88>;
			scale-multiplier = <22>;
			scale-divisor = <1000>;
			#invert;
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_Y>;
		};
		x-ch {
			io-channels = <&adc 1>;
			mv-mid = <1682>;
			mv-min-max = <1600>;
			mv-deadzone = <88>;
			scale-multiplier = <22>;
			scale-divisor = <1000>;
			invert;
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_X>;
			#report-on-change-only;
		};
	};

	zip_autolayer: zip_autolayer {
		compatible = "zmk,input-processor-autolayer";
		#input-processor-cells = <0>;
		
		layer-on = <MOV>;
		timeout-ms = <10000>;
		
		mouse-layer-keys = <
			&kp MB1 &kp MB2 &kp MB3
			&mmv MOVE_UP &mmv MOVE_DOWN &mmv MOVE_LEFT &mmv MOVE_RIGHT
			&msc SCRL_UP &msc SCRL_DOWN &msc SCRL_LEFT &msc SCRL_RIGHT
		>;
		
		non-mouse-layer-keys = <
			&kp LSHFT &kp RSHFT
			&kp LCTRL &kp RCTRL
			&kp LALT &kp RALT
			&kp LGUI &kp RGUI
			&mo LWR &mo LWRW
			&to QWE &to NIC &to LIN &to NICL &to WIN
			&trans
		>;
	};

	analog_input_listener {
		status = "okay";
		compatible = "zmk,input-listener";
		device = <&anin0>;

		// アナログ入力デバイスの動きをトリガーとしてオートマウスレイヤーを有効化
		zip_autolayer_on: autolayer_active {
			input-processors = <&zip_autolayer>;
		};

		scroll {
			layers = <RSE RSEW>;
			input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>
							 , <&zip_xy_scaler 8 100>
							 , <&zip_xy_to_scroll_mapper>;
		};
		layer1_speed_half {
			layers = <LWR LWRW>;
			input-processors = <&zip_xy_transform (0)>
							 , <&zip_xy_scaler 18 100>;
		};
	};

	zip_keybind_keys_directionL: zip_keybind_keys_directionL {
		compatible = "zmk,input-processor-keybind";
		#input-processor-cells = <0>;
		track_remainders;
		bindings = <&kp RIGHT>,
					<&kp LEFT>,
					<&kp UP>,
					<&kp DOWN>;
		tick = <60>;
		wait-ms = <0>;
		tap-ms = <10>;
	};

	zip_keybind_keys_directionH: zip_keybind_keys_directionH {
		compatible = "zmk,input-processor-keybind";
		#input-processor-cells = <0>;
		track_remainders;
		bindings = <&kp RIGHT>,
					<&kp LEFT>,
					<&kp UP>,
					<&kp DOWN>;
		tick = <40>;
		wait-ms = <0>;
		tap-ms = <10>;
	};

	zip_keybind_keys_media: zip_keybind_keys_media {
		compatible = "zmk,input-processor-keybind";
		#input-processor-cells = <0>;
		track_remainders;
		bindings = <&kp C_FF>,
					<&kp C_RW>,
					<&kp C_VOL_UP>,
					<&kp C_VOL_DN>;
		tick = <60>;
		wait-ms = <0>;
		tap-ms = <10>;
	};
};

&kscan0 {
	col-gpios
		= <&gpio0 9 GPIO_ACTIVE_HIGH>
		, <&gpio0 10 GPIO_ACTIVE_HIGH>
		, <&xiao_d 2 GPIO_ACTIVE_HIGH>
		, <&xiao_d 3 GPIO_ACTIVE_HIGH>
		, <&xiao_d 4 GPIO_ACTIVE_HIGH>
		, <&xiao_d 5 GPIO_ACTIVE_HIGH>
		;
};

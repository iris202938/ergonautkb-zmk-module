/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "ergonaut_one.dtsi"
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600   // デフォルト: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // デフォルト: 10

&adc {
	status = "okay";
};

/ {
	// 左手側ジョイスティック (マウスカーソル移動用)
	anin0: analog_input_0 {
		compatible = "zmk,analog-input";
		sampling-hz = <100>;
		y-ch {
			io-channels = <&adc 0>; // Y軸がADCチャンネル0に接続
			mv-mid = <1716>; // Y軸のニュートラル（中央）でのミリボルト値
			mv-min-max = <1600>; // Y軸の最小/最大ミリボルト範囲
			mv-deadzone = <88>; // Y軸のデッドゾーン（感度を調整）
			scale-multiplier = <1>; // スケーリングの乗数
			scale-divisor = <50>; // スケーリングの除数
			#invert; // Y軸の入力を反転
			evt-type = <INPUT_EV_REL>; // 相対イベントタイプ
			input-code = <INPUT_REL_X>; // Y軸の動きをマウスのX軸（水平）にマッピング
		};
		x-ch {
			io-channels = <&adc 1>; // X軸がADCチャンネル1に接続
			mv-mid = <1682>; // X軸のニュートラル（中央）でのミリボルト値
			mv-min-max = <1600>; // X軸の最小/最大ミリボルト範囲
			mv-deadzone = <88>; // X軸のデッドゾーン
			scale-multiplier = <1>;
			scale-divisor = <50>;
			invert; // X軸の入力を反転
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_Y>; // X軸の動きをマウスのY軸（垂直）にマッピング
			#report-on-change-only; // 値が変更された時のみレポート（マウス入力では不要とコメントされているが、設定されている）
		};
	};

	// ★★★ 修正点: anin1 の定義を削除/コメントアウト ★★★
	// 左手側にはジョイスティックが一つだけなので、anin1は不要です。
	// このブロック全体を削除するか、コメントアウトしてください。
	/*
	anin1: analog_input_1 {
		compatible = "zmk,analog-input";
		sampling-hz = <100>;
		y-ch {
			io-channels = <&adc 2>;
			mv-mid = <1716>;
			mv-min-max = <1600>;
			mv-deadzone = <88>;
			scale-multiplier = <1>;
			scale-divisor = <50>;
			#invert;
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_X>;
		};
		x-ch {
			io-channels = <&adc 3>;
			mv-mid = <1682>;
			mv-min-max = <1600>;
			mv-deadzone = <88>;
			scale-multiplier = <1>;
			scale-divisor = <50>;
			invert;
			evt-type = <INPUT_EV_REL>;
			input-code = <INPUT_REL_Y>;
			#report-on-change-only;
		};
	};
	*/

	behaviors {
		right: input_right {
				compatible = "zmk,behavior-mod-morph";
				#binding-cells = <0>;
				bindings = <&kp RIGHT>, <&kp END>;
				mods = <(MOD_LCTL|MOD_LSFT)>;
		};
		left: input_left {
				compatible = "zmk,behavior-mod-morph";
				#binding-cells = <0>;
				bindings = <&kp LEFT>, <&kp HOME>;
				mods = <(MOD_LCTL|MOD_LSFT)>;
		};
		up: input_up {
				compatible = "zmk,behavior-mod-morph";
				#binding-cells = <0>;
				bindings = <&kp UP>, <&kp PG_UP>;
				mods = <(MOD_LCTL|MOD_LSFT)>;
		};
		down: input_down {
				compatible = "zmk,behavior-mod-morph";
				#binding-cells = <0>;
				bindings = <&kp DOWN>, <&kp PG_DN>;
				mods = <(MOD_LCTL|MOD_LSFT)>;
		};
		 scroll_behavior: mouse_scroll_stick_behavior {
			 compatible = "zmk,behavior-mouse-scroll";
		 };
	};

	// ★★★ 修正点: `joystick_listener` はコメントアウトを維持 ★★★
	// 左手側のジョイスティックが一つだけなので、`analog_input_listener` が `anin0` を監視すれば十分です。
	// `joystick_listener` は完全にコメントアウトされたままにしておきます。
	analog_input_listener {
			status = "okay";
			compatible = "zmk,input-listener";
			device = <&anin0>; // 左手側ジョイスティック (anin0) を監視
			input-processors = <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP)>; // X軸とY軸の入力をスワップ

		scroll {
			layers = <4>; // レイヤー4がアクティブな場合
			input-processors = <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)> // X/YスワップとY反転
					 , <&zip_xy_scaler 1 8> // スケーリング（1/8）
					 , <&zip_xy_to_scroll_mapper>; // スクロールイベントにマッピング
		};
		layer1_speed_half {
			layers = <3>; // レイヤー3がアクティブな場合
			input-processors = <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP)>
							 , <&zip_xy_scaler 1 3>; // 速度を1/3に設定 (乗数1, 除数3)
		};
	};

	zip_keybind_keys0: zip_keybind_keys0 {
			compatible = "zmk,input-processor-keybind";
			#input-processor-cells = <0>;
		track-remainders; // ハイフンに修正済み
			bindings = <&right>,
					<&left>,
					<&up>,
					<&down>;
			tick = <60>; // ティック間隔
			wait-ms = <0>; // 待機時間
			tap-ms = <10>; // タップ時間
	};
	zip_keybind_keys1: zip_keybind_keys1 {
			compatible = "zmk,input-processor-keybind";
			#input-processor-cells = <0>;
		track-remainders; // ハイフンに修正済み
			bindings = <&kp C_FF>,
					<&kp C_RW>,
					<&kp C_VOL_UP>,
					<&kp C_VOL_DN>;
			tick = <60>;
			wait-ms = <0>;
			tap-ms = <10>;
	};
};

// ★★★ 修正点: joystick_listener のブロックは削除またはコメントアウトしたままにする ★★★
// 左手側にジョイスティックが一つだけなので、このブロックは不要です。
/*
&joystick_listener {
	status = "okay";
	device = <&anin1>; // 2つ目のジョイスティック (anin1) を監視
	input-processors = <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP)>;
	process-next;
};
*/

&kscan0 {
    // ★★★ 修正点: row-gpiosを追加 (繰り返しになりますが、重要です) ★★★
    // ここに左手側の行のGPIOピンを追記してください。
    // 例: (これは一般的なXIAO BLEボードのピンアサインの可能性を考慮した例です)
    row-gpios
        = <&gpio0 5 GPIO_ACTIVE_HIGH> // 実際のピン番号に合わせる
        , <&gpio0 6 GPIO_ACTIVE_HIGH>
        , <&gpio0 7 GPIO_ACTIVE_HIGH>
        , <&gpio0 8 GPIO_ACTIVE_HIGH>
        ;
    col-gpios
        = <&gpio0 9 GPIO_ACTIVE_HIGH>
        , <&gpio0 10 GPIO_ACTIVE_HIGH>
        , <&xiao_d 2 GPIO_ACTIVE_HIGH>
        , <&xiao_d 3 GPIO_ACTIVE_HIGH>
        , <&xiao_d 4 GPIO_ACTIVE_HIGH>
        , <&xiao_d 5 GPIO_ACTIVE_HIGH>
        ;
};
